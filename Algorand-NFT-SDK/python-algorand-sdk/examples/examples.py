#import functions
from py_sdk import nft_sdk_testnet as tn

'''
A user should import the required functions corresponding to their desired network.

In this example we would be using the testnet network.

Import staments for other networks include:

from nft_sdk_mainnet import create_nft, verify_opt_in, claim_nft, update_nft, create_account

from nft_sdk_betanet import create_nft, verify_opt_in, claim_nft, update_nft, create_account


'''

#steps:

'''
Step 1:

Call the create_nft function to create an NFT

the function takes the following arguments:

create_nft(name, symbol, metadata_url, manager="", reserve="", freeze="", clawback="")

1. name: this argument of type string is mandatory and denotes the name of the NFT.
2. symbol: this argument of type string is mandatory and denotes the symbol used to identify the NFT
3. metadata_url: this argument of type string is mandatory and denotes the metadata url string in the format of the desired ARC standard of the NFT. It should be a url pointing to the metadata of the NFT

The 4 remaining arguments are all of type string and are optional. 

4. manager: the manager address
5. reserve: the reserve address
6. freeze: the freeze address
7. clawback: the clawback address

Return: the asset ID (success) or False (failure)
'''

# tn.create_nft("Lazer Eyes", "LE", "https://bit.ly/3WcU077#i")

'''
Step 2:

The create NFT function returns the asset ID, prints it and also writes it to the testnet_asset_id.txt file.
The user must then manually opt in to the asset in their wallet by adding the asset_id before proceeding to call the claim NFT function in order to claim the newly minted NFT.

if the User does not have a wallet, they may call the create_account() function in order to generate a new wallet, private key and mnemonic and can import the wallet using the mnemonic seed phrase on a my alsgo wallet or pera algo wallet. 

the create_account() function takes no arguments and returns the address of the newly generated account if successful and returns False otherwise
'''

'''
Step 3: 

The next step would be to call the claim_nft function. 

The user must have opted-in to the aseet in the wallet they intend to use to claim the NFT as the function would fail otherwise. A user may also optionally call the verify_opt_in function to verify that the wallet has opted-in to the asset before calling the claim_nft function.

verify_opt_in(address, asset_id)

1. address: this argument of type string is the address you want to check has opted in to the asset
2. asset_id: this argument of type int is the asset you want to check for

Return: True (success) False (failure)

claim_nft(address, asset_id)

1. address: this argument of type string is the address you want to claim the NFT
2. asset_id: this argument of type int is the asset you want to claim

Return: transaction ID (TXID) (success) False (failure)
'''
'''
please replace address and asset_id with your address and asset ID generated by the create_nft function
comment out the create NFT function after ruing it the first time and then uncomment the claim_nft function and run the script again
'''

tn.claim_nft("BKULWP4WWNEFJRAUEZJD4RCWQ6G4XVH24MZINYOHB76SF2MTMFEOM5CABY", 156938060)

'''
optional step:

update_nft(asset_id, metadata_url)

This function can be called to update an NFT

1. asset_id: argument of type int, the ID of the NFT to be updated  
2. metadata_url: argument of type string, the new metadata url that contains the changes to the NFT

Return: the asset ID (success) or False (failure)
'''

